// Fix: Replaced the entire content of types.ts with the correct, centralized type definitions.
// The previous content was a copy of another utility file, causing circular dependencies and preventing types from being exported.
// This single change resolves all type-related errors across the application by providing the missing exported types.

/**
 * Basic price data for a single time point from the CryptoCompare API.
 */
export interface PriceData {
  time: number; // UNIX timestamp in milliseconds
  open: number;
  high: number;
  low: number;
  close: number;
}

/**
 * Represents the trading signals generated by the strategy.
 */
export type Signal = 'BUY' | 'SELL' | 'HOLD';

/**
 * A data point for the chart, enriched with calculated EMA indicators and a potential trading signal.
 */
export interface ChartDataPoint extends PriceData {
  ema13?: number;
  ema48?: number;
  ema200?: number;
  signal?: Signal;
  stopLoss?: number;
}

/**
 * Represents a supported trading pair.
 */
export interface TradingPair {
  base: 'BTC' | 'ETH';
  quote: 'USD';
  symbol: string; // e.g., 'BTC/USD'
  tradingViewSymbol: string; // e.g., 'COINBASE:BTCUSD'
}

/**
 * Details of a calculated trade setup.
 */
export interface TradeDetails {
  takeProfit: number;
  stopLoss: number;
  positionSizeInBase: number; // e.g., size in BTC or ETH
  positionSizeInUSD: number; // This is the Notional Value
  riskAmountInUSD: number;
  leverage: number; // The leverage used for this specific trade
}


/**
 * Configuration for a single timeframe option available in the UI.
 */
export interface AppTimeframeOption {
  label: string;
  value: string;
  cryptoCompareEndpoint: string; // e.g., 'histominute', 'histohour'
  aggregate: number;
  days: number; // Not directly used in API call, but can be for context
  tradingView: string; // The interval string for the TradingView widget
  pollInterval: number; // How often to refresh data in milliseconds
}

/**
 * The risk model used for calculating position size.
 * - 'percentage': Risk a percentage of total capital.
 * - 'fixed': Risk a fixed USD amount.
 */
export type RiskModel = 'percentage' | 'fixed';

/**
 * The type of trading account being simulated.
 */
export type TradeType = 'spot' | 'margin' | 'contracts';


/**
 * User-configurable settings for trade calculations and risk management.
 */
export interface TradeSettings {
  capital: number;
  riskPercentage: number;
  riskModel: RiskModel;
  fixedRiskAmount: number;
  tradeType: TradeType;
  leverage: number;
  trailingStopEnabled: boolean;
  trailingStopActivation: number;
  trailingStopDistance: number;
}

/**
 * Represents a single completed trade for display in the trade history table.
 */
export interface HistoricalTrade {
  entrySignal: ChartDataPoint;
  exitSignal?: ChartDataPoint; // Optional: A trade is 'open' if this is missing
  positionSizeUSD: number;
  positionSizeInBase: number;
  profitOrLoss?: number; // Optional: Unrealized P/L for open trades
  profitOrLossPercentage?: number; // Optional: Unrealized P/L for open trades
  type: 'BUY' | 'SELL';
  stopLoss: number;
  exitReason?: 'Reversal' | 'Trailing Stop' | 'Stop Loss';
}

/**
 * Represents a single trade alert for display in the history.
 */
export interface Alert {
  id: number;
  text: string;
  timestamp: number;
}